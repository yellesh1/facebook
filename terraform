Terraform Day - 01 Class Video : https://youtu.be/9kHYJgHMBwU

Terraform Day - 02 Class Video : https://youtu.be/SsuKTH0rSzs

Terraform Day - 03 Class Video : https://youtu.be/CF1fiUPdaBI?si=nfRZkcULuEermuIA
https://classroom.google.com/c/NzQ3NjY1MjQwNzI1/p/NzQ3NjgzMDY1NTcw?pli=1

Skip to main content
Google Classroom
Classroom
DevOps with Multi Cloud - A
  
Home
Calendar
Enrolled
To-do
D
DevOps with Multi Cloud - B
D
DevOps with Multi Cloud - A
Archived classes
Settings
Announcement
Ashok IT
â€¢
Jan 29 (Edited Yesterday)
Terraform Day - 01 Class Video : https://youtu.be/9kHYJgHMBwU

Terraform Day - 02 Class Video : https://youtu.be/SsuKTH0rSzs

Terraform Day - 03 Class Video : https://youtu.be/CF1fiUPdaBI?si=nfRZkcULuEermuIA

12_Terraform_Notes.txt
Text
Class comments
#### Git Hub Repo : https://github.com/ashokitschool/Terraform_Projects.git
 
===========
Terraform
===========

=> Developed by Hashicorp

=> To create/provision infrastructure in cloud platform

=> IAC software (infrastructure as code)

=> Supports all most all cloud platforms

=> Terraform will use HCL language to provision infrastructure

		HCL : Hashicorp configuration language

=> We can install terraform in mulitple Operating Systems

	Ex: Windows, Linux....		

==============================
Terraform Vs Cloud Formation
==============================

=> Cloud Formation is used to create infrastructure only in aws cloud

=> Terraform supports all cloud platforms available in the market.


====================================
Terraform Installation in Windows
====================================

Step-1 : Download terraform for windows & extract zip file 

	Note: We can see terraform.exe file

Step-2 : Set path for terraform s/w in System environment variables

Step-3 : Verify terraform setup using cmd

		$ terraform -v

Step-4 : Download and install VS CODE IDE to write terraform scripts

	URL : https://code.visualstudio.com/download


=========================
Terraform Architecture
=========================	

=> Terraform will use HCL script to provision infrastructure in cloud platforms.

=> We need to write HCL script and save it in .tf file


	.tf => init => fmt => validate => plan => apply => destroy


=> Below are the terraform commands

terraform init : Initialize terraform script (.tf file)

terraform fmt : Format terraform script indent spacing (optinal)

terraform validate : Verify terraform script syntax is valid or not (optional)

terraform plan : Create execution plan for terraform script

terraform apply : Create actual resources in cloud based on plan

Note: tfstate file will be created to track the resources created with our script.

terraform destroy : It is used to delete the resources created with our script.


### Terraform AWS Documentation : https://registry.terraform.io/providers/hashicorp/aws/latest/docs


==========================================
Terraform Script To create EC2 Instance
==========================================

provider "aws" {	
	region = "ap-south-1"
	access_key = "AKIATCKAMNKD6R2YIMPM"
	secret_key = "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"
}

resource "aws_instance" "ashokit_linux_vm" {
	
	ami = "ami-0e53db6fd757e38c7"
	instance_type = "t2.micro"
	key_name = "awslab"
	security_groups = ["default"]
	tags = {
		Name = "LinuxVM"
	}
}
---------------------------------------

$ terraform init

$ terraform validate

$ terraform fmt

$ terraform plan

$ terraform apply --auto-approve

$ terraform destory --auto-approve


=========================
Variables in Terraform
=========================

=> Variables are used to store data in key-value format

			id = 101
			name = ashok

=> We can remove hard coded values from resources script using variables

=> Variables we can maintain in seperate .tf file

	Ex :  input-vars.tf

variable "ami" {
    description = "Amazon machine image id"
    default  = "ami-0e53db6fd757e38c7"
}

variable "instance_type" {
    description = "Represens EC2 instance type"
    default = "t2.micro"
}

variable "key_name" {
    description = ""
    default = "awslab"
}

=> We can access variables in our resources script like below

resource "aws_instance" "ashokit_ec2_vm" {

    ami = "${var.ami}"
    instance_type = "${var.instance_type}"
    key_name = "${var.key_name}"
    security_groups = ["default"]
    tags = {
        Name = "AIT-Linux-VM
    }
}


=================================
Types of variables in terraform
=================================

		1) Input Variables

		2) Output Variables

=> Input variables are used to supply values to the terraform script.

	Ex : ami, instance_type, keyname, securitygrp

=> Output variables are used to get the values from terraform script after execution.

		Ex-1 : After EC2 VM created, print ec2-vm public ip

		Ex-2 : After S3 bucket got created, print bucket info

		Ex-3 : After RDS instance got created, print DB endpoint

		Ex-4 : After IAM user got created print IAM user info


-------------------provider.tf--------------------

provider "aws" {	
	region = "ap-south-1"
	access_key = "AKIATCKAMNKD6R2YIMPM"
	secret_key = "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"
}

-------------------input-vars.tf------------------

variable "ami" {
    description = "Amazon machine image id"
    default  = "ami-0e53db6fd757e38c7"
}

variable "instance_type" {
    description = "Represens EC2 instance type"
    default = "t2.micro"
}

variable "key_name" {
    description = ""
    default = "awslab"
}

--------------------main.tf-------------------

resource "aws_instance" "ashokit_ec2_vm" {
  ami             = var.ami
  instance_type   = var.instance_type
  key_name        = var.key_name
  security_groups = ["default"]
  tags = {
    Name = "AIT-Linux-VM"
  }
}

---------------output-vars.tf--------------------

output "ec2_vm_public_ip" {
  value = aws_instance.ashokit_ec2_vm.public_ip
}

output "ec2_private_ip" {
  value = aws_instance.ashokit_ec2_vm.private_ip
}

output "ec2_subnet_id"{
    value = aws_instance.ashokit_ec2_vm.subnet_id
}

output "ec2_complete_info"{
    value = aws_instance.ashokit_ec2_vm
}
-------------------------------------------------


====================
Creating S3 Bucket	
===================

=> S3 is storage service in AWS cloud

=> S3 provides unlimited storage



resource "aws_s3_bucket" "mys3b" {
  bucket = var.bucket_name
  acl    = "private"

  versioning {
    enabled = true
  }
}

=======================================
What is taint and untaint in terraform
=======================================

=> Terraform "taint" is used to replace the resource when we apply the script next time.

=> For example we have created two resources like below


resource "aws_instance" "vm1"{
    // configuration
}

resource "aws_s3_bucket" "abt1"{
    // configuration
}

=> After sometime we realized that ec2 vm got damaged...

Note : we can taint that ec2 vm using below command to replace when we apply the script next time

$ terraform taint aws_instance.vm1

$ terraform apply --auto-approve

Note: The alternate for "taint" is "replace"

$ terraform apply -replace=aws_instance.vm1 --auto-approve



============
Assignment
===========

1) Create Custom VPC

2) Create Ec2 Instance using Custom VPC


===================
Terraform Modules
===================

=> A Terraform module is a set of terraform configuration files available in a single directory. 

=> One module can contain one or more .tf files

		01-Project
		   - provider.tf
		   - main.tf
		   - input-vars.tf
		   - output-vars.tf

=> One module can have any no.of child modules in terraform

		irctc-app
		   - provider.tf
		   - main.tf
		   - outputs.tf	
		   - ec2
		      - main.tf
		      - inputs.tf
		      - outputs.tf
		   - s3
		   	  - main.tf
		   	  - inputs.tf
		   	  - outputs.tf
		   - rds
		   	  - main.tf
		   	  - inputs.tf
		   	  - outputs.tf

Note : Using terraform modules we can achieve re-usability

Note: We will run terraform commands from root module and root module will invoke child modules for execution.

======================================
Terraform project setup with Modules
======================================

### Step-1 : Create Project directory

		Ex: 05-TF-Modules

### Step-2 : Create "modules" directory inside project directory

		Ex: 05-TF-Modules
				- modules

### Step-3 : Create "ec2" & "s3" directories inside "modules" directory

		Ex:  05-TF-Modules
				- modules
					- ec2
					- s3

### Step-4 : Create terraform scripts inside "ec2" directory

				inputs.tf
				main.tf
				outputs.tf

### Step-4 : Create terraform scripts inside "S3" directory

				inputs.tf
				main.tf
				outputs.tf

### Step-6 : create "provider.tf" file in root module

### Step-7 : create "main.tf" file in root module and invoke child modules from root module.

module "my_ec2"{
    source = "./modules/ec2"
}

module "my_s3" {
    source = "./modules/s3"
}


### Step-8: Create "ouputs.tf" in project root module and access child modules related outputs.

output "ec2_public_ip" {
  value = module.my_ec2.a_public_ip
}

output "ec2_private_ip" {
  value = module.my_ec2.b_private_ip
}

output "s3_bucket" {
  value = module.my_s3.c_s3_info
}





12_Terraform_Notes.txt
Displaying 12_Terraform_Notes.txt.
